{"version":3,"sources":["app/features/Recorder/constants.ts","app/features/Timer/constants.ts","app/features/Recorder/utils/getNextStatus.ts","app/features/Recorder/errors/RecorderError.ts","app/features/Recorder/utils/getEnumeratedMediaDevices.ts","app/features/Recorder/utils/convertMediaDevicesToSelectOptions.ts","app/features/Recorder/utils/userMediaUtils.ts","app/features/Recorder/store.ts","app/features/Recorder/context.tsx","app/features/Recorder/hooks/useEnumerateMediaDevices.ts","app/features/Recorder/hooks/useRecorder.ts","app/features/Recorder/hooks/useSelectMediaDeviceOptions.ts","app/features/Recorder/hooks/useBuildUserMediaConstraints.ts","app/features/Recorder/hooks/useStartCapture.ts","app/features/Recorder/hooks/useUpdateRecorderPreviewSource.ts","app/features/Recorder/hooks/usePreviewCurrentTime.ts","app/features/Recorder/styled/Recorder.ts","app/features/Recorder/styled/RecorderControls.ts","app/features/Recorder/components/Recorder.tsx","app/features/Timer/utils/getTimeParts.ts","app/features/Timer/utils/IntervalTimer.ts","app/features/Timer/utils/formatNum.ts","app/features/Timer/hooks/useTimer.ts","app/features/Timer/components/TimerCountDown.tsx","app/features/Timer/styled/TimerCountDown.ts","app/features/Timer/components/Time.tsx","app/features/Recorder/components/RecordingControls.tsx","app/features/Recorder/styled/RecordingButtonIcon.ts","app/features/Icons/components/SvgIcon.tsx","app/features/Icons/components/PlayIcon.tsx","app/features/Icons/components/CameraSettingIcon.tsx","app/features/Icons/components/MicIcon.tsx","app/features/Icons/components/RecStopIcon.tsx","app/features/Icons/components/ResetIcon.tsx","app/features/Icons/components/StopIcon.tsx","app/features/Icons/components/RecIcon.tsx","app/features/Icons/components/SettingsIcon.tsx","app/features/Recorder/components/RecordingButtonIcon.tsx","app/features/Recorder/styled/RecordingSettings.ts","app/features/Recorder/components/RecordingSettings.tsx","app/features/Recorder/components/RecordingPreviewControls.tsx","app/App.tsx","app/reportWebVitals.ts","app/index.tsx"],"names":["RecorderStatuses","MediaDeviceKinds","RecorderActionTypes","RecorderErrorCodes","TimerStatuses","TimerDirections","LOADING_STATUSES","idle","preparing","preparingConstraints","readyToStartCapture","previewPreparing","RECORDER_STATUSES","ready","running","recording","PLAYER_PREVIEW_STATUSES","previewPlaying","previewStopped","previewPaused","INITIAL_STATE","status","duration","blob","mediaStream","videoDeviceId","audioDeviceId","mediaConstraints","videoDevicesList","audioDevicesList","error","RECORDER_ERRORS_CONFIG","notSupported","name","message","videoAccessDenied","audioAccessDenied","mediaDeviceNotConnected","getNextStatus","RecorderError","code","this","Error","getEnumeratedMediaDevices","a","enumerateDevices","enumeratedDevices","existedEnumeratedVideoInput","find","device","kind","videoinput","existedEnumeratedAudioInput","audioinput","isEmptyVideoDevicesList","isEmpty","isNotConfirmedAccessToVideoMediaDevice","deviceId","isNotConfirmedAccessToAudioMediaDevice","isNeededConfirmationToAccessToVideo","video","isNeededConfirmationAccessToAudio","audio","getUserMedia","accessStream","resetStreamPromise","Promise","resolve","streamTracks","getTracks","forEach","track","index","stop","length","convertMediaDevicesToSelectOptions","mediaDevicesList","labelTemplate","map","value","label","mediaDevices","navigator","recorderReducer","state","type","payload","setStatus","addVideoMediaDevices","uniqBy","addAudioMediaDevices","setActiveAudioDeviceId","mediaDeviceId","setActiveVideoDeviceId","setMediaConstraints","setMediaStream","setBlob","setDuration","initialValue","setNextStatus","resetMediaStream","clearMediaConstraints","clearBlob","setError","RecorderContext","createContext","RecorderContextProvider","children","useReducer","dispatch","useCallback","nextStatus","useRecorderStore","Provider","useRecorderState","useContext","useRecorderActions","DEFAULT_MEDIA_DEVICE_ID","useEnumerateMediaDevices","prepareMediaDevices","isExistAudioInput","mediaDevice","isExistVideoInput","videoDevices","filter","audioDevices","defaultVideoMediaDevice","defaultAudioMediaDevice","useEffect","err","useRecorder","playerNode","mediaRecorderRef","useRef","useBuildUserMediaConstraints","useStartCapture","useUpdateRecorderPreviewSource","handleDataAvailable","data","current","MediaRecorder","mimeType","audioBitsPerSecond","videoBitsPerSecond","ondataavailable","startRecording","start","stopRecording","mediaRecorder","useSelectMediaDeviceOptions","audioValue","videoValue","audioOptions","videoOptions","buildUserMediaConstraints","constraints","supports","getSupportedConstraints","videoConstraints","exact","String","width","min","ideal","max","height","aspectRatio","frameRate","facingMode","startCapture","stream","muted","srcObject","autoplay","useLayoutEffect","src","URL","createObjectURL","setTimeout","revokeObjectURL","usePreviewCurrentTime","skip","rafIdRef","isMountedRef","initialTime","currentTime","useState","setCurrentTime","handleTimeUpdate","window","cancelAnimationFrame","requestAnimationFrame","addEventListener","removeEventListener","RecorderWrapperPanel","styled","Panel","RecordingVideoPreview","RecorderControlsWrapper","div","RecorderControlsTimer","RecorderTimeDivider","span","RecorderButton","IconButton","RecordingPreviewProgressBarWrapper","RecordingControlsWrapper","props","justify","RecordingControlsStyles","createGlobalStyle","RecorderTimerStyles","Recorder","videoPreviewRef","isLoading","includes","isRecording","isPreviewing","isRecordingRunning","isSkipUpdatePreviewTime","previewTime","videoPreviewClassNames","classNames","active","handlePlayPause","videoPreview","play","pause","bordered","Loader","backdrop","content","vertical","Message","full","showIcon","header","ref","className","onEnded","CSSTransition","timeout","unmountOnExit","in","onStartRecording","onStopRecording","onPlayPause","onReset","getTimeParts","time","lastPart","parts","lastPartIndex","findIndex","unit","dividers","dividersAcc","reduce","acc","Math","floor","ms","s","m","h","d","IntervalTimer","expectedTime","timeToUpdate","direction","forward","onChange","onStop","intervalId","startTime","downtime","startPause","passedTime","setPassedTime","startTimer","resumed","Date","now","setInterval","computeTime","paused","clearInterval","resume","toggle","delta","updatedPassedTime","lostTimeGap","formatNum","num","padStart","useTimer","isInSeconds","startImmediately","intervalTimerRef","timeDelta","handleStart","handleChangeTime","handleStopIntervalTimer","updateTime","TimerCountDown","setTimerRef","timer","TimerCountDownWrapper","Time","RecordingControls","timerRef","stopTimer","handleStartRecording","FlexboxGrid","align","Item","onClick","color","appearance","icon","circle","RecorderIconWrapper","RecorderIconText","SvgIcon","viewBox","titleAccess","other","focusable","aria-hidden","undefined","role","defaultProps","PlayIcon","fill","CameraSettingIcon","fillRule","clipRule","MicIcon","RecStopIcon","ResetIcon","StopIcon","RecIcon","SettingsIcon","RecordingButtonIcon","renderIconBody","RecordingSettingsWrapper","RecordingSettingModal","Modal","RecordingSettingGroup","RecordingSettingRow","RecordingSettingSelect","SelectPicker","RecordingSettingIconWrapper","RecordingSettings","isOpen","setIsOpen","handleClose","size","open","onClose","Header","Title","Body","searchable","cleanable","placeholder","Footer","Button","RecordingPreviewControls","previewTimeMs","progressPercentage","Progress","Line","percent","strokeColor","showInfo","StyledFlexboxGrid","App","CustomProvider","theme","Container","Content","colspan","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c1dd9db.chunk.js","sourcesContent":["import { RecorderErrorsConfigType, RecorderStateType } from 'app/features/Recorder/types';\n\nexport enum RecorderStatuses {\n    idle = 'idle',\n    preparing = 'preparing',\n    preparingConstraints = 'preparingConstraints',\n    readyToStartCapture = 'readyToStartCapture',\n    ready = 'ready',\n    running = 'running',\n    recording = 'recording',\n    previewPreparing = 'previewPreparing',\n    previewPlaying = 'previewPlaying',\n    previewPaused = 'previewPaused',\n    previewStopped = 'previewStopped',\n    error = 'error',\n}\n\nexport enum MediaDeviceKinds {\n    videoinput = 'videoinput',\n    audioinput = 'audioinput',\n}\n\nexport enum RecorderActionTypes {\n    setStatus = 'setStatus',\n    addVideoMediaDevices = 'addVideoMediaDevices',\n    addAudioMediaDevices = 'addAudioMediaDevices',\n    setActiveAudioDeviceId = 'setActiveAudioDeviceId',\n    setActiveVideoDeviceId = 'setActiveVideoDeviceId',\n    setMediaConstraints = 'setMediaConstraints',\n    setMediaStream = 'setMediaStream',\n    setBlob = 'setBlob',\n    setDuration = 'setDuration',\n    error = 'error',\n}\n\nexport enum RecorderErrorCodes {\n    notSupported = 'notSupported',\n    videoAccessDenied = 'videoAccessDenied',\n    audioAccessDenied = 'audioAccessDenied',\n    mediaDeviceNotConnected = 'mediaDeviceNotConnected',\n}\n\nexport const LOADING_STATUSES = [\n    RecorderStatuses.idle,\n    RecorderStatuses.preparing,\n    RecorderStatuses.preparingConstraints,\n    RecorderStatuses.readyToStartCapture,\n    RecorderStatuses.previewPreparing,\n];\n\nexport const RECORDER_STATUSES = [RecorderStatuses.ready, RecorderStatuses.running, RecorderStatuses.recording];\n\nexport const PLAYER_PREVIEW_STATUSES = [\n    RecorderStatuses.previewPlaying,\n    RecorderStatuses.previewStopped,\n    RecorderStatuses.previewPaused,\n];\n\nexport const INITIAL_STATE: RecorderStateType = {\n    status: RecorderStatuses.idle,\n    duration: 0,\n    blob: null,\n    mediaStream: null,\n    videoDeviceId: null,\n    audioDeviceId: null,\n    mediaConstraints: null,\n    videoDevicesList: [],\n    audioDevicesList: [],\n    error: null,\n};\n\nexport const RECORDER_ERRORS_CONFIG: RecorderErrorsConfigType = {\n    [RecorderErrorCodes.notSupported]: {\n        name: 'Browser is not supported',\n        message:\n            'Either your browser or your OS doesn’t support audio recording. Please try to update your browser to latest version or try another.',\n    },\n    [RecorderErrorCodes.videoAccessDenied]: {\n        name: 'Access denied',\n        message: 'Make sure that access to web-camera  is allowed in your browser preferences',\n    },\n    [RecorderErrorCodes.audioAccessDenied]: {\n        name: 'Access denied',\n        message: 'Make sure that access to microphone is allowed in your browser preferences',\n    },\n    [RecorderErrorCodes.mediaDeviceNotConnected]: {\n        name: 'Camera is not connected',\n        message: 'Make sure that access to media device is allowed in your browser preferences',\n    },\n};\n","export enum TimerStatuses {\n    idle = 'idle',\n    running = 'running',\n    paused = 'paused',\n    resumed = 'resumed',\n}\n\nexport enum TimerDirections {\n    forward = 'forward',\n    backward = 'backward',\n}\n","import { RecorderStatuses } from 'app/features/Recorder/constants';\n\nconst getNextStatus = (status: RecorderStatuses): Nullable<RecorderStatuses> => {\n    switch (status) {\n        case RecorderStatuses.idle:\n            return RecorderStatuses.preparing;\n        case RecorderStatuses.preparing:\n            return RecorderStatuses.ready;\n        case RecorderStatuses.ready:\n            return RecorderStatuses.running;\n        case RecorderStatuses.running:\n            return RecorderStatuses.recording;\n        case RecorderStatuses.recording:\n            return RecorderStatuses.previewPreparing;\n        case RecorderStatuses.previewPreparing:\n            return RecorderStatuses.previewStopped;\n        case RecorderStatuses.previewStopped:\n            return RecorderStatuses.previewPlaying;\n        case RecorderStatuses.previewPlaying:\n            return RecorderStatuses.previewPaused;\n        case RecorderStatuses.previewPaused:\n            return RecorderStatuses.previewPlaying;\n        default:\n            return null;\n    }\n};\n\nexport default getNextStatus;\n","import { RECORDER_ERRORS_CONFIG } from 'app/features/Recorder/constants';\nimport type { RecorderErrorCodes } from 'app/features/Recorder/constants';\n\nclass RecorderError extends Error {\n    code: RecorderErrorCodes;\n\n    constructor(code: RecorderErrorCodes) {\n        super();\n\n        this.code = code;\n    }\n\n    get name(): string {\n        return RECORDER_ERRORS_CONFIG[this.code].name;\n    }\n\n    get message(): string {\n        return RECORDER_ERRORS_CONFIG[this.code].message;\n    }\n}\n\nexport default RecorderError;\n","import { isEmpty } from 'lodash';\nimport RecorderError from 'app/features/Recorder/errors/RecorderError';\nimport { enumerateDevices, getUserMedia } from 'app/features/Recorder/utils';\nimport { MediaDeviceKinds, RecorderErrorCodes } from 'app/features/Recorder/constants';\n\nconst getEnumeratedMediaDevices = async (\n    mediaConstraints: MediaStreamConstraints,\n    videoDevicesList?: MediaDeviceInfo[],\n): Promise<MediaDeviceInfo[]> => {\n    const enumeratedDevices = await enumerateDevices();\n\n    const existedEnumeratedVideoInput = enumeratedDevices.find(\n        (device: MediaDeviceInfo) => device?.kind === MediaDeviceKinds.videoinput,\n    );\n    const existedEnumeratedAudioInput = enumeratedDevices.find(\n        (device: MediaDeviceInfo) => device?.kind === MediaDeviceKinds.audioinput,\n    );\n\n    const isEmptyVideoDevicesList = isEmpty(videoDevicesList);\n    const isNotConfirmedAccessToVideoMediaDevice =\n        existedEnumeratedVideoInput && isEmpty(existedEnumeratedVideoInput.deviceId);\n    const isNotConfirmedAccessToAudioMediaDevice =\n        existedEnumeratedAudioInput && isEmpty(existedEnumeratedAudioInput.deviceId);\n\n    const isNeededConfirmationToAccessToVideo = mediaConstraints.video && isNotConfirmedAccessToVideoMediaDevice;\n    const isNeededConfirmationAccessToAudio = mediaConstraints.audio && isNotConfirmedAccessToAudioMediaDevice;\n\n    if (isEmptyVideoDevicesList && (isNeededConfirmationToAccessToVideo || isNeededConfirmationAccessToAudio)) {\n        try {\n            const accessStream = await getUserMedia(mediaConstraints);\n\n            const resetStreamPromise = new Promise((resolve) => {\n                const streamTracks = (accessStream as MediaStream).getTracks();\n\n                streamTracks.forEach((track, index) => {\n                    track.stop();\n\n                    if (index + 1 === streamTracks.length) resolve(true);\n                });\n            });\n\n            await resetStreamPromise;\n\n            return getEnumeratedMediaDevices(mediaConstraints);\n        } catch {\n            if (mediaConstraints.video) throw new RecorderError(RecorderErrorCodes.videoAccessDenied);\n            if (mediaConstraints.audio) throw new RecorderError(RecorderErrorCodes.audioAccessDenied);\n        }\n    }\n\n    return enumeratedDevices;\n};\n\nexport default getEnumeratedMediaDevices;\n","const convertMediaDevicesToSelectOptions = (\n    mediaDevicesList: MediaDeviceInfo[],\n    labelTemplate: string,\n): SelectOptionType[] =>\n    mediaDevicesList.map(({ deviceId: value, label }, index) => ({\n        value,\n        label: label || `${labelTemplate} ${index + 1}`,\n    }));\n\nexport default convertMediaDevicesToSelectOptions;\n","import { RecorderErrorCodes } from 'app/features/Recorder/constants';\nimport RecorderError from 'app/features/Recorder/errors/RecorderError';\n\nexport const getSupportedConstraints = (): MediaTrackSupportedConstraints => {\n    const { mediaDevices } = navigator;\n\n    if (!mediaDevices || !mediaDevices.getSupportedConstraints)\n        throw new RecorderError(RecorderErrorCodes.notSupported);\n\n    return mediaDevices.getSupportedConstraints();\n};\n\nexport const enumerateDevices = (): Promise<Array<MediaDeviceInfo>> => {\n    const { mediaDevices } = navigator;\n\n    if (!mediaDevices || !mediaDevices.enumerateDevices) throw new RecorderError(RecorderErrorCodes.notSupported);\n\n    return mediaDevices.enumerateDevices();\n};\n\nexport const getUserMedia = (mediaConstraints: MediaStreamConstraints): Promise<MediaStream> => {\n    const { mediaDevices } = navigator;\n\n    if (!mediaDevices || !mediaDevices.enumerateDevices) throw new RecorderError(RecorderErrorCodes.notSupported);\n\n    return mediaDevices.getUserMedia(mediaConstraints);\n};\n","import { useReducer, useCallback } from 'react';\nimport { uniqBy } from 'lodash';\nimport { RecorderStatuses, RecorderActionTypes, INITIAL_STATE } from 'app/features/Recorder/constants';\nimport { RecorderStateType, RecorderActionType } from 'app/features/Recorder/types';\n\nconst recorderReducer = (state: RecorderStateType, { type, payload, error }: RecorderActionType): RecorderStateType => {\n    switch (type) {\n        case RecorderActionTypes.setStatus: {\n            if (payload?.status === state.status) return state;\n            return {\n                ...state,\n                status: payload?.status ?? state.status,\n            };\n        }\n        case RecorderActionTypes.addVideoMediaDevices:\n            return {\n                ...state,\n                videoDevicesList: uniqBy([...state.videoDevicesList, ...(payload?.mediaDevices ?? [])], 'deviceId'),\n            };\n        case RecorderActionTypes.addAudioMediaDevices:\n            return {\n                ...state,\n                audioDevicesList: uniqBy([...state.audioDevicesList, ...(payload?.mediaDevices ?? [])], 'deviceId'),\n            };\n\n        case RecorderActionTypes.setActiveAudioDeviceId:\n            return {\n                ...state,\n                audioDeviceId: payload?.mediaDeviceId,\n            };\n        case RecorderActionTypes.setActiveVideoDeviceId:\n            return {\n                ...state,\n                videoDeviceId: payload?.mediaDeviceId,\n            };\n        case RecorderActionTypes.setMediaConstraints:\n            return {\n                ...state,\n                mediaConstraints: payload?.mediaConstraints,\n            };\n        case RecorderActionTypes.setMediaStream:\n            return {\n                ...state,\n                mediaStream: payload?.mediaStream,\n            };\n        case RecorderActionTypes.setBlob:\n            return {\n                ...state,\n                blob: payload?.blob,\n            };\n        case RecorderActionTypes.setDuration:\n            return {\n                ...state,\n                duration: payload?.duration ?? 0,\n            };\n        case RecorderActionTypes.error:\n            return {\n                ...state,\n                error,\n            };\n        default:\n            return state;\n    }\n};\n\ntype UseRecorderStoreOutputType = {\n    state: RecorderStateType;\n    setStatus: (status: RecorderStatuses) => void;\n    addVideoMediaDevices: (mediaDevices: MediaDeviceInfo[]) => void;\n    addAudioMediaDevices: (mediaDevices: MediaDeviceInfo[]) => void;\n    setActiveVideoDeviceId: (mediaDevice: string) => void;\n    setActiveAudioDeviceId: (mediaDevice: string) => void;\n    setMediaConstraints: (mediaConstraints: Nullable<MediaStreamConstraints>) => void;\n    setMediaStream: (mediaStream: Nullable<MediaStream>) => void;\n    setBlob: (blob: Nullable<Blob>) => void;\n    setDuration: (duration: number) => void;\n    setError: (error: Nullable<Error>) => void;\n};\n\nexport const useRecorderStore = (): UseRecorderStoreOutputType => {\n    const [state, dispatch] = useReducer(recorderReducer, INITIAL_STATE);\n\n    const setStatus = useCallback(\n        (nextStatus: RecorderStatuses) =>\n            dispatch({ type: RecorderActionTypes.setStatus, payload: { status: nextStatus } }),\n        [],\n    );\n\n    const addVideoMediaDevices = useCallback(\n        (mediaDevices: MediaDeviceInfo[]) =>\n            dispatch({ type: RecorderActionTypes.addVideoMediaDevices, payload: { mediaDevices } }),\n        [],\n    );\n\n    const addAudioMediaDevices = useCallback(\n        (mediaDevices: MediaDeviceInfo[]) =>\n            dispatch({ type: RecorderActionTypes.addAudioMediaDevices, payload: { mediaDevices } }),\n        [],\n    );\n\n    const setActiveVideoDeviceId = useCallback(\n        (mediaDeviceId: string) =>\n            dispatch({ type: RecorderActionTypes.setActiveVideoDeviceId, payload: { mediaDeviceId } }),\n        [],\n    );\n\n    const setActiveAudioDeviceId = useCallback(\n        (mediaDeviceId: string) =>\n            dispatch({ type: RecorderActionTypes.setActiveAudioDeviceId, payload: { mediaDeviceId } }),\n        [],\n    );\n\n    const setMediaConstraints = useCallback(\n        (mediaConstraints: Nullable<MediaStreamConstraints>) =>\n            dispatch({ type: RecorderActionTypes.setMediaConstraints, payload: { mediaConstraints } }),\n        [],\n    );\n\n    const setMediaStream = useCallback(\n        (mediaStream: Nullable<MediaStream>) =>\n            dispatch({ type: RecorderActionTypes.setMediaStream, payload: { mediaStream } }),\n        [],\n    );\n\n    const setBlob = useCallback(\n        (blob: Nullable<Blob>) => dispatch({ type: RecorderActionTypes.setBlob, payload: { blob } }),\n        [],\n    );\n\n    const setDuration = useCallback(\n        (duration: number) => dispatch({ type: RecorderActionTypes.setDuration, payload: { duration } }),\n        [],\n    );\n\n    const setError = useCallback((error: Nullable<Error>) => dispatch({ type: RecorderActionTypes.error, error }), []);\n\n    return {\n        state,\n        setStatus,\n        addVideoMediaDevices,\n        addAudioMediaDevices,\n        setActiveVideoDeviceId,\n        setActiveAudioDeviceId,\n        setMediaConstraints,\n        setMediaStream,\n        setBlob,\n        setDuration,\n        setError,\n    };\n};\n","import React, { createContext, useContext } from 'react';\nimport { RecorderStateType } from 'app/features/Recorder/types';\nimport { useRecorderStore } from 'app/features/Recorder/store';\nimport { INITIAL_STATE, RecorderStatuses } from 'app/features/Recorder/constants';\nimport { getNextStatus } from 'app/features/Recorder/utils';\n\ntype RecorderActionsType = {\n    setStatus: (status: RecorderStatuses) => void;\n    setNextStatus: () => void;\n    addVideoMediaDevices: (mediaDevices: MediaDeviceInfo[]) => void;\n    addAudioMediaDevices: (mediaDevices: MediaDeviceInfo[]) => void;\n    setActiveVideoDeviceId: (mediaDevice: string) => void;\n    setActiveAudioDeviceId: (mediaDevice: string) => void;\n    setMediaConstraints: (mediaConstraints: Nullable<MediaStreamConstraints>) => void;\n    setMediaStream: (mediaStream: Nullable<MediaStream>) => void;\n    setBlob: (blob: Nullable<Blob>) => void;\n    setDuration: (duration: number) => void;\n    resetMediaStream: () => void;\n    clearMediaConstraints: () => void;\n    clearBlob: () => void;\n\n    setError: (error: Nullable<Error>) => void;\n};\n\ntype RecorderContextValueType = RecorderActionsType & {\n    state: RecorderStateType;\n};\n\nconst initialValue: RecorderContextValueType = {\n    state: INITIAL_STATE,\n    setStatus: () => {},\n    setNextStatus: () => {},\n    addVideoMediaDevices: () => {},\n    addAudioMediaDevices: () => {},\n    setActiveVideoDeviceId: () => {},\n    setActiveAudioDeviceId: () => {},\n    setMediaConstraints: () => {},\n    setMediaStream: () => {},\n    setBlob: () => {},\n    setDuration: () => {},\n    resetMediaStream: () => {},\n    clearMediaConstraints: () => {},\n    clearBlob: () => {},\n    setError: () => {},\n};\n\nconst RecorderContext = createContext<RecorderContextValueType>(initialValue);\n\nexport const RecorderContextProvider: React.FC = ({ children }) => {\n    const {\n        state,\n        setStatus,\n        addVideoMediaDevices,\n        addAudioMediaDevices,\n        setActiveVideoDeviceId,\n        setActiveAudioDeviceId,\n        setMediaConstraints,\n        setMediaStream,\n        setBlob,\n        setDuration,\n        setError,\n    } = useRecorderStore();\n\n    const { status, mediaStream, blob } = state;\n\n    const setNextStatus = (): void => setStatus(getNextStatus(status) ?? status);\n\n    const clearMediaConstraints = (): void => setMediaConstraints(null);\n\n    const resetMediaStream = (): void => {\n        if (!mediaStream) return;\n\n        mediaStream.getTracks().forEach((track) => track.stop());\n\n        setMediaStream(null);\n    };\n\n    const clearBlob = (): void => {\n        if (blob) setBlob(null);\n    };\n\n    return (\n        <RecorderContext.Provider\n            value={{\n                state,\n                setStatus,\n                setNextStatus,\n                addVideoMediaDevices,\n                addAudioMediaDevices,\n                setActiveVideoDeviceId,\n                setActiveAudioDeviceId,\n                setMediaConstraints,\n                setMediaStream,\n                setBlob,\n                setDuration,\n                resetMediaStream,\n                clearMediaConstraints,\n                clearBlob,\n                setError,\n            }}\n        >\n            {children}\n        </RecorderContext.Provider>\n    );\n};\n\nexport const useRecorderState = (): RecorderStateType => useContext(RecorderContext).state;\n\nexport const useRecorderActions = (): RecorderActionsType => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { state, ...actions } = useContext(RecorderContext);\n\n    return actions;\n};\n","import { useEffect } from 'react';\nimport { isEmpty } from 'lodash';\nimport RecorderError from 'app/features/Recorder/errors/RecorderError';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport { RecorderStatuses, MediaDeviceKinds, RecorderErrorCodes } from 'app/features/Recorder/constants';\nimport { getEnumeratedMediaDevices } from 'app/features/Recorder/utils';\n\nconst DEFAULT_MEDIA_DEVICE_ID = 'default';\n\nconst useEnumerateMediaDevices = (): void => {\n    const { status } = useRecorderState();\n    const {\n        setStatus,\n        addAudioMediaDevices,\n        addVideoMediaDevices,\n        setActiveVideoDeviceId,\n        setActiveAudioDeviceId,\n        setError,\n    } = useRecorderActions();\n\n    const prepareMediaDevices = async () => {\n        try {\n            const enumeratedDevices = await getEnumeratedMediaDevices({\n                audio: true,\n                video: true,\n            });\n\n            const isExistAudioInput = enumeratedDevices.find(\n                (mediaDevice) =>\n                    mediaDevice.kind === MediaDeviceKinds.audioinput &&\n                    !isEmpty((mediaDevice as MediaDeviceInfo).deviceId),\n            );\n            const isExistVideoInput = enumeratedDevices.find(\n                (mediaDevice) =>\n                    mediaDevice.kind === MediaDeviceKinds.videoinput &&\n                    !isEmpty((mediaDevice as MediaDeviceInfo).deviceId),\n            );\n\n            if (!isExistAudioInput || !isExistVideoInput)\n                throw new RecorderError(RecorderErrorCodes.mediaDeviceNotConnected);\n\n            const videoDevices = enumeratedDevices.filter(\n                ({ kind }: MediaDeviceInfo) => kind === MediaDeviceKinds.videoinput,\n            );\n            const audioDevices = enumeratedDevices.filter(\n                ({ kind }: MediaDeviceInfo) => kind === MediaDeviceKinds.audioinput,\n            );\n\n            const defaultVideoMediaDevice =\n                videoDevices.find(\n                    ({ kind, deviceId }: MediaDeviceInfo) =>\n                        kind === MediaDeviceKinds.videoinput && deviceId === DEFAULT_MEDIA_DEVICE_ID,\n                ) || videoDevices[0];\n\n            const defaultAudioMediaDevice =\n                audioDevices.find(\n                    ({ kind, deviceId }: MediaDeviceInfo) =>\n                        kind === MediaDeviceKinds.audioinput && deviceId === DEFAULT_MEDIA_DEVICE_ID,\n                ) || audioDevices[0];\n\n            addVideoMediaDevices(videoDevices);\n            addAudioMediaDevices(audioDevices);\n\n            if (defaultVideoMediaDevice) setActiveVideoDeviceId(defaultVideoMediaDevice.deviceId);\n            if (defaultAudioMediaDevice) setActiveAudioDeviceId(defaultAudioMediaDevice.deviceId);\n\n            setStatus(RecorderStatuses.preparingConstraints);\n        } catch (err) {\n            setError(err as Error);\n        }\n    };\n\n    useEffect(() => {\n        if (status !== RecorderStatuses.idle) return;\n\n        try {\n            setStatus(RecorderStatuses.preparing);\n            prepareMediaDevices();\n        } catch (err) {\n            setStatus(RecorderStatuses.error);\n            setError(err as Error);\n        }\n    }, [status]);\n};\n\nexport default useEnumerateMediaDevices;\n","import { useEffect, useRef } from 'react';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport { RecorderStatuses } from 'app/features/Recorder/constants';\nimport {\n    useEnumerateMediaDevices,\n    useBuildUserMediaConstraints,\n    useStartCapture,\n    useUpdateRecorderPreviewSource,\n} from 'app/features/Recorder/hooks';\n\ntype UseRecorderOutputType = {\n    startRecording: () => void;\n    stopRecording: () => void;\n};\n\nconst useRecorder = (playerNode: Nullable<HTMLVideoElement>): UseRecorderOutputType => {\n    const mediaRecorderRef = useRef<MediaRecorder>();\n    const { status, mediaStream } = useRecorderState();\n    const { setStatus, setBlob } = useRecorderActions();\n\n    useEnumerateMediaDevices();\n    useBuildUserMediaConstraints();\n    useStartCapture(playerNode);\n    useUpdateRecorderPreviewSource(playerNode);\n\n    const handleDataAvailable = ({ data }: BlobEvent): void => {\n        setBlob(data);\n    };\n\n    const setupRecorder = () => {\n        if (!mediaStream) return;\n\n        const recorderOptions = {\n            mimeType: 'video/webm',\n            audioBitsPerSecond: 128000,\n            videoBitsPerSecond: 2500000,\n        };\n\n        mediaRecorderRef.current = new MediaRecorder(mediaStream, recorderOptions);\n        mediaRecorderRef.current.ondataavailable = handleDataAvailable;\n\n        setStatus(RecorderStatuses.running);\n    };\n\n    const startRecording = (): void => {\n        mediaRecorderRef?.current?.start?.();\n    };\n\n    const stopRecording = (): void => {\n        const { current: mediaRecorder } = mediaRecorderRef;\n\n        if (!mediaRecorder) return;\n        mediaRecorder.stop();\n\n        setStatus(RecorderStatuses.previewPreparing);\n    };\n\n    useEffect(() => {\n        if (status !== RecorderStatuses.ready) return;\n\n        setupRecorder();\n    }, [status, mediaStream]);\n\n    return {\n        startRecording,\n        stopRecording,\n    };\n};\n\nexport default useRecorder;\n","import { useRecorderState } from 'app/features/Recorder/context';\nimport { convertMediaDevicesToSelectOptions } from 'app/features/Recorder/utils';\n\ntype UseSelectMediaDeviceOptionsOutputType = {\n    audioValue: Nullable<string>;\n    videoValue: Nullable<string>;\n    audioOptions: SelectOptionType[];\n    videoOptions: SelectOptionType[];\n};\n\nconst useSelectMediaDeviceOptions = (): UseSelectMediaDeviceOptionsOutputType => {\n    const { videoDevicesList, audioDevicesList, videoDeviceId, audioDeviceId } = useRecorderState();\n\n    return {\n        audioValue: audioDeviceId,\n        videoValue: videoDeviceId,\n        audioOptions: convertMediaDevicesToSelectOptions(audioDevicesList, 'Audio device'),\n        videoOptions: convertMediaDevicesToSelectOptions(videoDevicesList, 'Video device'),\n    };\n};\n\nexport default useSelectMediaDeviceOptions;\n","import { useEffect } from 'react';\nimport RecorderError from 'app/features/Recorder/errors/RecorderError';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport { getSupportedConstraints } from 'app/features/Recorder/utils';\nimport { RecorderStatuses, RecorderErrorCodes } from 'app/features/Recorder/constants';\n\nconst useBuildUserMediaConstraints = () => {\n    const { status, audioDeviceId, videoDeviceId } = useRecorderState();\n    const { setMediaConstraints, clearMediaConstraints, setStatus, setError } = useRecorderActions();\n\n    const buildUserMediaConstraints = (): void => {\n        const constraints: MediaStreamConstraints = {\n            video: false,\n            audio: false,\n        };\n\n        const supports = getSupportedConstraints();\n\n        const videoConstraints: MediaTrackConstraintSet = {\n            deviceId: { exact: String(videoDeviceId) },\n            width: { min: 640, ideal: 1280, max: 1920 },\n            height: { min: 360, ideal: 720, max: 1080 },\n        };\n\n        if (supports.aspectRatio) videoConstraints.aspectRatio = { ideal: 16 / 9 };\n\n        if (supports.frameRate) videoConstraints.frameRate = { min: 25, ideal: 30, max: 30 };\n\n        if (supports.facingMode) videoConstraints.facingMode = { ideal: 'user' };\n\n        if (videoDeviceId) constraints.video = videoConstraints;\n\n        if (audioDeviceId) {\n            constraints.audio = {\n                deviceId: { exact: audioDeviceId },\n            };\n        } else {\n            constraints.audio = false;\n        }\n\n        if (!constraints.video && !constraints.audio) throw new RecorderError(RecorderErrorCodes.videoAccessDenied);\n\n        setMediaConstraints(constraints);\n        setStatus(RecorderStatuses.readyToStartCapture);\n    };\n\n    useEffect(() => {\n        if (status !== RecorderStatuses.preparingConstraints) return;\n        try {\n            clearMediaConstraints();\n            buildUserMediaConstraints();\n        } catch (err) {\n            setError(err as Error);\n        }\n    }, [status]);\n};\n\nexport default useBuildUserMediaConstraints;\n","/* eslint-disable no-param-reassign */\nimport { useEffect } from 'react';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport { RecorderStatuses } from 'app/features/Recorder/constants';\nimport { getUserMedia } from 'app/features/Recorder/utils';\n\nconst useStartCapture = (playerNode: Nullable<HTMLVideoElement>) => {\n    const { status, mediaConstraints, mediaStream } = useRecorderState();\n    const { setStatus, setMediaStream, resetMediaStream } = useRecorderActions();\n\n    const startCapture = async (): Promise<void> => {\n        if (!mediaConstraints) return;\n\n        const stream = await getUserMedia(mediaConstraints);\n\n        setMediaStream(stream);\n        setStatus(RecorderStatuses.ready);\n    };\n\n    const startupPreview = (): void => {\n        if (!playerNode || !mediaStream) return;\n\n        playerNode.muted = true;\n        playerNode.srcObject = mediaStream;\n        playerNode.autoplay = true;\n    };\n\n    useEffect(() => {\n        if (status !== RecorderStatuses.readyToStartCapture) return () => {};\n        startCapture();\n\n        return resetMediaStream;\n    }, [status, mediaConstraints]);\n\n    useEffect(() => {\n        if (status !== RecorderStatuses.readyToStartCapture) return;\n        startupPreview();\n    }, [status, playerNode, mediaStream]);\n};\n\nexport default useStartCapture;\n","/* eslint-disable no-param-reassign */\nimport { useLayoutEffect } from 'react';\nimport { RecorderStatuses } from 'app/features/Recorder/constants';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\n\nconst useUpdateRecorderPreviewSource = (playerNode: Nullable<HTMLVideoElement>): void => {\n    const { blob } = useRecorderState();\n    const { setStatus, resetMediaStream } = useRecorderActions();\n\n    useLayoutEffect(() => {\n        if (!playerNode || !blob) return (): void => {};\n\n        playerNode.srcObject = null;\n        playerNode.autoplay = false;\n        playerNode.muted = false;\n        playerNode.src = URL.createObjectURL(blob);\n\n        resetMediaStream();\n\n        setTimeout(() => {\n            setStatus(RecorderStatuses.previewStopped);\n        }, 1000);\n\n        return (): void => {\n            if (playerNode.src) URL.revokeObjectURL(playerNode.src);\n        };\n    }, [blob, playerNode]);\n};\n\nexport default useUpdateRecorderPreviewSource;\n","import { useState, useLayoutEffect, useRef } from 'react';\n\nconst usePreviewCurrentTime = (playerNode: Nullable<HTMLVideoElement>, skip?: boolean): number => {\n    const rafIdRef = useRef<number>();\n    const isMountedRef = useRef<boolean>(false);\n\n    const initialTime = skip ? 0 : playerNode?.currentTime;\n    const [currentTime, setCurrentTime] = useState(initialTime ?? 0);\n\n    useLayoutEffect(() => {\n        if (!playerNode) return () => {};\n\n        const handleTimeUpdate = (): void => {\n            if (skip || !playerNode || !isMountedRef.current) return;\n\n            if (rafIdRef.current) window.cancelAnimationFrame(rafIdRef.current);\n\n            setCurrentTime(playerNode.currentTime);\n\n            rafIdRef.current = window.requestAnimationFrame(handleTimeUpdate);\n        };\n\n        isMountedRef.current = true;\n\n        playerNode.addEventListener('timeupdate', handleTimeUpdate);\n\n        return (): void => {\n            isMountedRef.current = false;\n            playerNode.removeEventListener('timeupdate', handleTimeUpdate);\n        };\n    }, [playerNode?.currentTime, skip]);\n\n    return currentTime;\n};\n\nexport default usePreviewCurrentTime;\n","import styled from 'styled-components';\nimport { Panel } from 'rsuite';\n\nexport const RecorderWrapperPanel = styled(Panel)`\n    padding: 0;\n    overflow: hidden;\n    position: relative;\n    > .rs-panel-body {\n        padding: 0;\n        display: flex;\n        flex-direction: column;\n        height: fit-content;\n    }\n`;\n\nexport const RecordingVideoPreview = styled.video`\n    width: 100%;\n    height: auto;\n    opacity: 0;\n    transition: opacity 0.5s;\n    &.active {\n        opacity: 1;\n    }\n`;\n","import styled, { createGlobalStyle } from 'styled-components';\n\nimport { IconButton } from 'rsuite';\n\nexport const RecorderControlsWrapper = styled.div`\n    position: relative;\n    background: rgb(0, 0, 0);\n    height: 80px;\n    width: 100%;\n`;\n\nexport const RecorderControlsTimer = styled.div`\n    font-size: 20px;\n    display: flex;\n`;\n\nexport const PreviewControlsWrapper = styled(RecorderControlsWrapper)`\n    justify-content: start;\n`;\n\nexport const RecorderTimeDivider = styled.span`\n    margin: 0 10px; ;\n`;\n\nexport const RecorderButton = styled(IconButton)`\n    width: 50px;\n    height: 50px;\n    margin: 0 10px;\n`;\n\nexport const RecordingPreviewProgressBarWrapper = styled.div`\n    position: absolute;\n    top: -10px;\n    left: 0;\n    width: 100%;\n    & > .rs-progress {\n        padding: 0;\n    }\n    .rs-progress-line-outer,\n    .rs-progress-line-inner {\n        border-radius: 0;\n    }\n    .rs-progress-line-bg {\n        transition: none;\n    }\n`;\n\ntype RecordingControlsWrapperProps = {\n    justify: 'center' | 'flex-start' | 'flex-end';\n};\n\nexport const RecordingControlsWrapper = styled.div<RecordingControlsWrapperProps>`\n    background: #000;\n    position: relative;\n    height: 80px;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: ${(props: RecordingControlsWrapperProps): string => props.justify};\n`;\n\nexport const RecordingControlsStyles = createGlobalStyle`\n.recording-controls-enter {\n  opacity: 0;\n}\n.recording-controls-enter-active{\n  opacity: 1;\n  transition: all 0.3s;\n} \n.recording-controls-enter-done {\n  opacity: 1;\n}\n.recording-controls-exit {\n  opacity: 1;\n}\n.recording-controls-exit-active {\n  opacity: 0;\n  transition: all 0.3s;\n}\n`;\n\nexport const RecorderTimerStyles = createGlobalStyle`\n.recording-timer {\n  opacity: 0;\n  visibility: hidden;\n  position: absolute;\n}\n.recording-timer-enter {\n  opacity: 0;\n  visibility: visible;\n  transform: translateX(0);\n}\n.recording-timer-enter-active {\n  opacity: 1;\n  transform: translateX(80px);\n  transition: all 0.3s;\n}\n.recording-timer-enter-done {\n  opacity: 1;\n  visibility: visible;\n  transform: translateX(80px);\n}\n.recording-timer-exit {\n  opacity: 1;\n  transform: translateX(80px);\n}\n.recording-timer-exit-active {\n  opacity: 0;\n  transform: translateX(0);\n  transition: all 0.3s;\n}\n`;\n","import React, { useRef } from 'react';\nimport { Loader, Message } from 'rsuite';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { useRecorder, usePreviewCurrentTime } from 'app/features/Recorder/hooks';\nimport { RecorderWrapperPanel, RecordingVideoPreview } from 'app/features/Recorder/styled/Recorder';\nimport { RecordingControlsStyles, RecordingControlsWrapper } from 'app/features/Recorder/styled/RecorderControls';\nimport {\n    RecorderStatuses,\n    LOADING_STATUSES,\n    RECORDER_STATUSES,\n    PLAYER_PREVIEW_STATUSES,\n} from 'app/features/Recorder/constants';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport { RecordingControls, RecordingPreviewControls, RecordingSettings } from 'app/features/Recorder/components';\n\nconst Recorder: React.FC = () => {\n    const videoPreviewRef = useRef<HTMLVideoElement>(null);\n\n    const { status, error } = useRecorderState();\n    const { setStatus, setNextStatus, clearBlob } = useRecorderActions();\n\n    const isLoading = LOADING_STATUSES.includes(status);\n    const isRecording = RECORDER_STATUSES.includes(status);\n    const isPreviewing = PLAYER_PREVIEW_STATUSES.includes(status);\n    const isRecordingRunning = status === RecorderStatuses.running;\n    const isSkipUpdatePreviewTime = isRecording || isLoading;\n\n    const { startRecording, stopRecording } = useRecorder(videoPreviewRef.current);\n\n    const previewTime = usePreviewCurrentTime(videoPreviewRef.current, isSkipUpdatePreviewTime);\n\n    const videoPreviewClassNames = classNames({\n        active: !isLoading,\n    });\n\n    const handleResetRecording = (): void => {\n        clearBlob();\n        setStatus(RecorderStatuses.idle);\n    };\n\n    const handleEndedPreview = (): void => {\n        setStatus(RecorderStatuses.previewStopped);\n    };\n\n    const handlePlayPause = async (): Promise<void> => {\n        const { current: videoPreview } = videoPreviewRef;\n\n        if (!videoPreview) return;\n\n        const isStopped = [RecorderStatuses.previewStopped, RecorderStatuses.previewPaused].includes(status);\n\n        if (isStopped) await videoPreview.play();\n        else await videoPreview.pause();\n\n        setNextStatus();\n    };\n\n    return (\n        <RecorderWrapperPanel bordered>\n            <RecordingControlsStyles />\n            {isLoading && <Loader backdrop content=\"loading...\" vertical />}\n            {isRecordingRunning && <RecordingSettings />}\n            {error && (\n                <Message full showIcon type=\"error\" header={error?.name ?? 'Something went wrong'}>\n                    {error.message}\n                </Message>\n            )}\n            <RecordingVideoPreview\n                ref={videoPreviewRef}\n                className={videoPreviewClassNames}\n                onEnded={handleEndedPreview}\n            />\n            <RecordingControlsWrapper justify={isPreviewing ? 'flex-start' : 'center'}>\n                <CSSTransition timeout={300} classNames=\"recording-controls\" unmountOnExit in={isRecording}>\n                    <RecordingControls onStartRecording={startRecording} onStopRecording={stopRecording} />\n                </CSSTransition>\n                <CSSTransition timeout={300} classNames=\"recording-controls\" unmountOnExit in={isPreviewing}>\n                    <RecordingPreviewControls\n                        previewTime={previewTime}\n                        onPlayPause={handlePlayPause}\n                        onReset={handleResetRecording}\n                    />\n                </CSSTransition>\n            </RecordingControlsWrapper>\n        </RecorderWrapperPanel>\n    );\n};\n\nexport default Recorder;\n","type TimePartsType = {\n    ms: number;\n    s: number;\n    m: number;\n    h: number;\n    d: number;\n};\n\nconst getTimeParts = (time: number, lastPart: string): TimePartsType => {\n    const parts = ['ms', 's', 'm', 'h', 'd'];\n    const lastPartIndex = parts.findIndex((unit) => unit === lastPart);\n\n    const dividers = [1000, 60, 60, 24, 1];\n    const dividersAcc = [1, 1000, 60000, 3600000, 86400000];\n\n    const startValue: TimePartsType = {\n        ms: 0,\n        s: 0,\n        m: 0,\n        h: 0,\n        d: 0,\n    };\n\n    const output = parts.reduce((acc, unit, index) => {\n        if (index > lastPartIndex) return { ...acc, [unit]: 0 };\n\n        if (index === lastPartIndex) return { ...acc, [unit]: Math.floor(time / dividersAcc[index]) };\n\n        return { ...acc, [unit]: Math.floor(time / dividersAcc[index]) % dividers[index] };\n    }, startValue);\n\n    return output;\n};\n\nexport default getTimeParts;\n","import { TimerDirections, TimerStatuses } from 'app/features/Timer/constants';\n\ntype IntervalTimerProps = {\n    initialTime?: number;\n    expectedTime?: number;\n    timeToUpdate: number;\n    direction?: TimerDirections;\n    onChange: (time: number) => void;\n    onStop?: (time: number) => void;\n};\n\nclass IntervalTimer {\n    intervalId: Nullable<number> = null;\n\n    initialTime: number;\n\n    expectedTime: number;\n\n    startTime = 0;\n\n    status: TimerStatuses = TimerStatuses.idle;\n\n    timeToUpdate = 1000;\n\n    downtime = 0;\n\n    startPause = 0;\n\n    passedTime = 0;\n\n    direction: TimerDirections;\n\n    onChange: (time: number) => void;\n\n    onStop: (time: number) => void;\n\n    constructor({\n        initialTime = 0,\n        expectedTime = 0,\n        timeToUpdate,\n        direction = TimerDirections.forward,\n        onChange = (): void => {},\n        onStop = (): void => {},\n    }: IntervalTimerProps) {\n        this.setPassedTime(initialTime);\n        this.initialTime = initialTime;\n        this.expectedTime = expectedTime;\n        this.timeToUpdate = timeToUpdate;\n        this.direction = direction;\n        this.onChange = onChange;\n        this.onStop = onStop;\n    }\n\n    setPassedTime = (time: number): void => {\n        this.passedTime = time;\n    };\n\n    startTimer = (): void => {\n        if (this.status !== TimerStatuses.idle && this.status !== TimerStatuses.resumed) return;\n\n        this.startTime = Date.now();\n\n        this.intervalId = window.setInterval(() => {\n            this.passedTime = this.computeTime();\n\n            this.onChange(this.passedTime);\n        }, this.timeToUpdate);\n\n        this.status = TimerStatuses.running;\n    };\n\n    stop = (): void => {\n        if (this.status !== TimerStatuses.running && this.status !== TimerStatuses.paused) return;\n\n        if (this.intervalId) clearInterval(this.intervalId);\n\n        this.status = TimerStatuses.idle;\n\n        this.onStop(this.passedTime);\n        this.setPassedTime(this.initialTime);\n        this.onChange(this.initialTime);\n    };\n\n    pause = (): void => {\n        if (this.status !== TimerStatuses.running) return;\n        this.startPause = Date.now();\n\n        if (this.intervalId) clearInterval(this.intervalId);\n\n        this.status = TimerStatuses.paused;\n    };\n\n    resume = (): void => {\n        if (this.status !== TimerStatuses.paused) return;\n\n        this.status = TimerStatuses.resumed;\n\n        this.startTimer();\n    };\n\n    toggle = (): void => {\n        if (this.status === TimerStatuses.paused) this.resume();\n        if (this.status === TimerStatuses.running) this.pause();\n        if (this.status === TimerStatuses.idle || this.status === TimerStatuses.resumed) this.startTimer();\n    };\n\n    computeTime = (): number => {\n        if (this.status !== TimerStatuses.running) return this.passedTime;\n\n        const currentTime = Date.now();\n        const delta = currentTime - this.startTime;\n\n        switch (this.direction) {\n            case 'forward':\n                this.passedTime += delta;\n                this.startTime = currentTime;\n\n                if (!!this.expectedTime && this.passedTime >= this.expectedTime) {\n                    this.stop();\n\n                    return this.expectedTime;\n                }\n\n                return this.passedTime;\n\n            case 'backward': {\n                const updatedPassedTime = this.passedTime - delta;\n                const lostTimeGap =\n                    updatedPassedTime % this.timeToUpdate\n                        ? this.timeToUpdate - (updatedPassedTime % this.timeToUpdate)\n                        : 0;\n\n                this.passedTime = updatedPassedTime + lostTimeGap;\n                this.startTime = currentTime;\n\n                if (this.passedTime < this.expectedTime) {\n                    this.stop();\n\n                    return 0;\n                }\n\n                return this.passedTime;\n            }\n\n            default:\n                return this.passedTime;\n        }\n    };\n}\n\nexport default IntervalTimer;\n","const formatNum = (num: number): string => String(num).padStart(2, '0');\n\nexport default formatNum;\n","import { useEffect, useState, useRef } from 'react';\nimport { TimerDirections } from 'app/features/Timer/constants';\nimport { IntervalTimer } from 'app/features/Timer/utils';\nimport { TimerOutputType } from 'app/features/Timer/types';\n\ntype UseTimerOptionsType = {\n    direction?: TimerDirections;\n    isInSeconds?: boolean;\n    initialTime?: number;\n    expectedTime?: number;\n    timeToUpdate?: number;\n    startImmediately?: boolean;\n    onStop?: (time: number) => void;\n};\n\nconst useTimer = ({\n    direction,\n    isInSeconds,\n    initialTime = 0,\n    expectedTime = 0,\n    timeToUpdate = 1000,\n    startImmediately,\n    onStop = (): void => {},\n}: UseTimerOptionsType): TimerOutputType => {\n    const [passedTime, setPassedTime] = useState(initialTime);\n    const intervalTimerRef = useRef<IntervalTimer>();\n\n    const timeDelta = isInSeconds ? 1000 : 1;\n\n    const handleStart = (): void => {\n        intervalTimerRef.current?.startTimer();\n    };\n\n    const handleStop = (): void => {\n        intervalTimerRef.current?.stop();\n    };\n\n    const handlePause = (): void => {\n        intervalTimerRef.current?.pause();\n    };\n\n    const handleResume = (): void => {\n        intervalTimerRef.current?.resume();\n    };\n\n    const handleToggle = (): void => {\n        intervalTimerRef.current?.toggle();\n    };\n\n    const handleChangeTime = (time: number): void => {\n        setPassedTime(time / timeDelta);\n    };\n\n    const handleStopIntervalTimer = (time: number): void => {\n        onStop(time / timeDelta);\n    };\n\n    const handleUpdateTimerTime = (time: number): void => {\n        setPassedTime(time);\n        intervalTimerRef.current?.setPassedTime(time * timeDelta);\n    };\n\n    useEffect(() => {\n        intervalTimerRef.current = new IntervalTimer({\n            initialTime: initialTime * timeDelta,\n            expectedTime: expectedTime * timeDelta,\n            direction,\n            timeToUpdate,\n            onChange: handleChangeTime,\n            onStop: handleStopIntervalTimer,\n        });\n\n        if (startImmediately) handleStart();\n    }, [initialTime, expectedTime, direction]);\n\n    return {\n        time: passedTime,\n        start: handleStart,\n        stop: handleStop,\n        pause: handlePause,\n        resume: handleResume,\n        toggle: handleToggle,\n        updateTime: handleUpdateTimerTime,\n    };\n};\n\nexport default useTimer;\n","import React, { useEffect } from 'react';\nimport { TimerDirections } from 'app/features/Timer/constants';\nimport { useTimer } from 'app/features/Timer/hooks';\nimport { Time } from 'app/features/Timer/components';\nimport { TimerOutputType } from 'app/features/Timer/types';\n\ntype TimerCountDownProps = {\n    direction?: TimerDirections;\n    initialTime?: number;\n    expectedTime?: number;\n    onStop?: (time: number) => void;\n    setTimerRef?: (ref: TimerOutputType) => void;\n};\n\nconst TimerCountDown: React.FC<TimerCountDownProps> = ({\n    direction = TimerDirections.forward,\n    initialTime = 0,\n    expectedTime,\n    setTimerRef,\n    onStop,\n}) => {\n    const timer = useTimer({\n        initialTime,\n        expectedTime,\n        direction,\n        startImmediately: false,\n        onStop,\n    });\n\n    useEffect(() => {\n        setTimerRef?.(timer);\n    }, []);\n\n    return <Time time={timer.time} />;\n};\n\nexport default TimerCountDown;\n","import styled from 'styled-components';\n\nexport const TimerCountDownWrapper = styled.div`\n    display: flex;\n`;\n","import React from 'react';\nimport { TimerCountDownWrapper } from 'app/features/Timer/styled/TimerCountDown';\nimport { getTimeParts, formatNum } from 'app/features/Timer/utils';\n\ntype TimeProps = {\n    time: number;\n};\n\nconst Time: React.FC<TimeProps> = ({ time }) => {\n    const { h, m, s } = getTimeParts(time, 'h');\n\n    return (\n        <TimerCountDownWrapper>\n            <span>{formatNum(h)}</span>\n            <span>:</span>\n            <span>{formatNum(m)}</span>\n            <span>:</span>\n            <span>{formatNum(s)}</span>\n        </TimerCountDownWrapper>\n    );\n};\n\nexport default Time;\n","import React, { useRef, useEffect } from 'react';\nimport { FlexboxGrid } from 'rsuite';\nimport { CSSTransition } from 'react-transition-group';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport {\n    RecorderButton,\n    RecorderControlsTimer,\n    RecorderTimerStyles,\n} from 'app/features/Recorder/styled/RecorderControls';\nimport { RecordingButtonIcon } from 'app/features/Recorder/components';\nimport { TimerCountDown } from 'app/features/Timer/components';\nimport { RecorderStatuses } from 'app/features/Recorder/constants';\nimport { TimerOutputType } from 'app/features/Timer/types';\n\ntype RecordingControlsProps = {\n    onStartRecording: () => void;\n    onStopRecording: () => void;\n};\n\nconst RecordingControls: React.FC<RecordingControlsProps> = ({ onStartRecording, onStopRecording }) => {\n    const timerRef = useRef<TimerOutputType>();\n    const { status } = useRecorderState();\n    const { setNextStatus, setDuration } = useRecorderActions();\n\n    const isRecording = status === RecorderStatuses.recording;\n\n    const setTimerRef = (timer: TimerOutputType): void => {\n        timerRef.current = timer;\n    };\n\n    const startTimer = (): void => timerRef.current?.start?.();\n\n    const stopTimer = (): void => timerRef.current?.stop?.();\n\n    const handleStartRecording = (): void => {\n        onStartRecording();\n        setNextStatus();\n        startTimer();\n    };\n\n    const handleStopRecording = (): void => {\n        onStopRecording();\n        setNextStatus();\n        stopTimer();\n    };\n\n    const handleMainButtonClick = (): void => {\n        switch (status) {\n            case RecorderStatuses.running:\n                handleStartRecording();\n                break;\n            case RecorderStatuses.recording:\n                handleStopRecording();\n                break;\n            default:\n        }\n    };\n\n    useEffect(() => {\n        if (status !== RecorderStatuses.previewStopped) return;\n        stopTimer();\n    }, [status]);\n\n    return (\n        <>\n            <RecorderTimerStyles />\n            <FlexboxGrid align=\"middle\" justify=\"center\">\n                <FlexboxGrid.Item>\n                    <RecorderButton\n                        onClick={handleMainButtonClick}\n                        color=\"red\"\n                        appearance=\"primary\"\n                        icon={<RecordingButtonIcon status={status} />}\n                        circle\n                    />\n                </FlexboxGrid.Item>\n                <CSSTransition timeout={300} classNames=\"recording-timer\" in={isRecording}>\n                    <RecorderControlsTimer className=\"recording-timer\">\n                        <TimerCountDown setTimerRef={setTimerRef} onStop={setDuration} />\n                    </RecorderControlsTimer>\n                </CSSTransition>\n            </FlexboxGrid>\n        </>\n    );\n};\n\nexport default RecordingControls;\n","import styled from 'styled-components';\n\nexport const RecorderIconWrapper = styled.span`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const RecorderIconText = styled.span`\n    margin-top: 5px;\n    text-transform: uppercase;\n    font-size: 8px;\n`;\n","import React from 'react';\nimport classNames from 'classnames';\nimport type { SvgElementProps } from 'app/features/Icons/types';\n\nconst SvgIcon: React.FC<SvgElementProps> = ({\n    children,\n    className,\n    color,\n    width,\n    height,\n    viewBox,\n    titleAccess,\n    ...other\n}) => (\n    <svg\n        className={classNames(className)}\n        width={width}\n        height={height}\n        viewBox={viewBox}\n        focusable=\"false\"\n        color={color || ''}\n        aria-hidden={titleAccess ? undefined : 'true'}\n        role={titleAccess ? 'img' : 'presentation'}\n        {...other}\n    >\n        {children}\n        {titleAccess ? <title>{titleAccess}</title> : null}\n    </svg>\n);\n\nSvgIcon.defaultProps = {\n    children: null,\n    className: '',\n    color: 'inherit',\n    titleAccess: '',\n};\n\nexport default SvgIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst PlayIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            d=\"M8.992 3.986C8.68773 3.81219 8.34315 3.72138 7.99274 3.72265C7.64234 3.72393 7.29842 3.81724 6.99542 3.99324C6.69243 4.16925 6.44099 4.42177 6.26629 4.72552C6.09159 5.02927 5.99976 5.37359 6 5.724V18.276C5.99976 18.6264 6.09159 18.9707 6.26629 19.2745C6.44099 19.5782 6.69243 19.8307 6.99542 20.0068C7.29842 20.1828 7.64234 20.2761 7.99274 20.2773C8.34315 20.2786 8.68773 20.1878 8.992 20.014L19.976 13.736C20.2819 13.561 20.5361 13.3083 20.7129 13.0034C20.8898 12.6986 20.9829 12.3524 20.9829 12C20.9829 11.6476 20.8898 11.3014 20.7129 10.9966C20.5361 10.6917 20.2819 10.439 19.976 10.264L8.992 3.986Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default PlayIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst CameraSettingIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M3.6 4C2.64522 4 1.72955 4.37928 1.05442 5.05442C0.379285 5.72955 0 6.64522 0 7.6V17.2C0 18.1548 0.379285 19.0705 1.05442 19.7456C1.72955 20.4207 2.64522 20.8 3.6 20.8H14.4C15.3548 20.8 16.2705 20.4207 16.9456 19.7456C17.6207 19.0705 18 18.1548 18 17.2V15.2968L20.928 18.2248C22.0608 19.3588 24 18.5548 24 16.9516V7.8484C24 6.2452 22.0608 5.4412 20.928 6.5764L18 9.502V7.6C18 6.64522 17.6207 5.72955 16.9456 5.05442C16.2705 4.37928 15.3548 4 14.4 4H3.6Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default CameraSettingIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst MicIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M7.36364 4.36364C7.36364 3.20633 7.82338 2.09642 8.64172 1.27808C9.46006 0.459739 10.57 0 11.7273 0C12.8846 0 13.9945 0.459739 14.8128 1.27808C15.6312 2.09642 16.0909 3.20633 16.0909 4.36364V10.9091C16.0909 12.0664 15.6312 13.1763 14.8128 13.9946C13.9945 14.813 12.8846 15.2727 11.7273 15.2727C10.57 15.2727 9.46006 14.813 8.64172 13.9946C7.82338 13.1763 7.36364 12.0664 7.36364 10.9091V4.36364ZM5.18182 9.81818C5.18182 9.52886 5.06688 9.25138 4.8623 9.04679C4.65771 8.84221 4.38024 8.72727 4.09091 8.72727C3.80158 8.72727 3.52411 8.84221 3.31952 9.04679C3.11493 9.25138 3 9.52886 3 9.81818V10.9091C3.00004 13.0348 3.77584 15.0875 5.18182 16.6819C6.5878 18.2763 8.52731 19.3028 10.6364 19.5687V22.9091C10.6364 23.1984 10.7513 23.4759 10.9559 23.6805C11.1605 23.8851 11.4379 24 11.7273 24C12.0166 24 12.2941 23.8851 12.4987 23.6805C12.7032 23.4759 12.8182 23.1984 12.8182 22.9091V19.5687C14.9272 19.3028 16.8667 18.2763 18.2727 16.6819C19.6787 15.0875 20.4545 13.0348 20.4545 10.9091V9.81818C20.4545 9.52886 20.3396 9.25138 20.135 9.04679C19.9304 8.84221 19.653 8.72727 19.3636 8.72727C19.0743 8.72727 18.7968 8.84221 18.5922 9.04679C18.3877 9.25138 18.2727 9.52886 18.2727 9.81818V10.9091C18.2727 12.6451 17.5831 14.3099 16.3556 15.5374C15.1281 16.7649 13.4632 17.4545 11.7273 17.4545C9.99131 17.4545 8.32645 16.7649 7.09894 15.5374C5.87143 14.3099 5.18182 12.6451 5.18182 10.9091V9.81818Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default MicIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst RecStopIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            d=\"M24 12C24 18.6276 18.6276 24 12 24C5.3724 24 0 18.6276 0 12C0 5.3724 5.3724 0 12 0C18.6276 0 24 5.3724 24 12ZM7.8 6.6C7.48174 6.6 7.17652 6.72643 6.95147 6.95147C6.72643 7.17652 6.6 7.48174 6.6 7.8V16.2C6.6 16.5183 6.72643 16.8235 6.95147 17.0485C7.17652 17.2736 7.48174 17.4 7.8 17.4H16.2C16.5183 17.4 16.8235 17.2736 17.0485 17.0485C17.2736 16.8235 17.4 16.5183 17.4 16.2V7.8C17.4 7.48174 17.2736 7.17652 17.0485 6.95147C16.8235 6.72643 16.5183 6.6 16.2 6.6H7.8Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default RecStopIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst ResetIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            d=\"M12.001 3.86412V1.62685C12.001 1.06441 11.3261 0.78944 10.9386 1.1894L7.439 4.67654C7.18902 4.92651 7.18902 5.31397 7.439 5.56395L10.9261 9.05109C11.3261 9.43855 12.001 9.16358 12.001 8.60114V6.36387C16.1381 6.36387 19.5003 9.72602 19.5003 13.8631C19.5003 17.2627 17.213 20.1375 14.1133 21.0499C13.5884 21.1998 13.2509 21.6998 13.2509 22.2372C13.2509 23.0497 14.0258 23.6871 14.8132 23.4496C16.8867 22.8438 18.708 21.5821 20.0037 19.8536C21.2995 18.1252 21.9999 16.0233 22 13.8631C22 8.33866 17.5255 3.86412 12.001 3.86412ZM4.5018 13.8631C4.5018 12.1883 5.05174 10.6384 5.98915 9.37606C6.36411 8.87611 6.31411 8.18868 5.87666 7.73873C5.35171 7.21378 4.4518 7.26377 4.00185 7.86371C3.03191 9.15503 2.38958 10.6623 2.12993 12.2563C1.87028 13.8503 2.00104 15.4835 2.51102 17.0159C3.021 18.5483 3.89497 19.9342 5.05802 21.0547C6.22107 22.1752 7.63851 22.997 9.18882 23.4496C9.97624 23.6871 10.7512 23.0497 10.7512 22.2372C10.7512 21.6998 10.4137 21.1998 9.88874 21.0499C6.78906 20.1375 4.5018 17.2627 4.5018 13.8631Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default ResetIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst StopIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            d=\"M7 5H17C17.5304 5 18.0391 5.21071 18.4142 5.58579C18.7893 5.96086 19 6.46957 19 7V17C19 17.5304 18.7893 18.0391 18.4142 18.4142C18.0391 18.7893 17.5304 19 17 19H7C6.46957 19 5.96086 18.7893 5.58579 18.4142C5.21071 18.0391 5 17.5304 5 17V7C5 6.46957 5.21071 5.96086 5.58579 5.58579C5.96086 5.21071 6.46957 5 7 5V5Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default StopIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst RecIcon: React.FC = () => (\n    <SvgIcon width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n        <path\n            d=\"M16 8.00067V8C16 3.582 12.4187 0 8 0C3.582 0 0 3.58133 0 8V8.00067C0 12.4187 3.58133 16.0007 8 16.0007C12.418 16.0007 16 12.4193 16 8.00067Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default RecIcon;\n","import React from 'react';\nimport { SvgIcon } from 'app/features/Icons/components';\n\nconst SettingsIcon: React.FC = () => (\n    <SvgIcon width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            d=\"M20 6.99999C20.2652 6.99999 20.5196 6.89464 20.7071 6.7071C20.8946 6.51956 21 6.26521 21 5.99999C21 5.73478 20.8946 5.48042 20.7071 5.29289C20.5196 5.10535 20.2652 4.99999 20 4.99999H10.83C10.6234 4.41446 10.2403 3.90743 9.7334 3.54878C9.22654 3.19014 8.62091 2.99754 8 2.99754C7.37909 2.99754 6.77346 3.19014 6.2666 3.54878C5.75974 3.90743 5.3766 4.41446 5.17 4.99999H4C3.73478 4.99999 3.48043 5.10535 3.29289 5.29289C3.10536 5.48042 3 5.73478 3 5.99999C3 6.26521 3.10536 6.51956 3.29289 6.7071C3.48043 6.89464 3.73478 6.99999 4 6.99999H5.17C5.3766 7.58553 5.75974 8.09256 6.2666 8.4512C6.77346 8.80985 7.37909 9.00244 8 9.00244C8.62091 9.00244 9.22654 8.80985 9.7334 8.4512C10.2403 8.09256 10.6234 7.58553 10.83 6.99999H20ZM20 13C20.2652 13 20.5196 12.8946 20.7071 12.7071C20.8946 12.5196 21 12.2652 21 12C21 11.7348 20.8946 11.4804 20.7071 11.2929C20.5196 11.1054 20.2652 11 20 11H18.83C18.6234 10.4145 18.2403 9.90743 17.7334 9.54878C17.2265 9.19014 16.6209 8.99754 16 8.99754C15.3791 8.99754 14.7735 9.19014 14.2666 9.54878C13.7597 9.90743 13.3766 10.4145 13.17 11H4C3.73478 11 3.48043 11.1054 3.29289 11.2929C3.10536 11.4804 3 11.7348 3 12C3 12.2652 3.10536 12.5196 3.29289 12.7071C3.48043 12.8946 3.73478 13 4 13H13.17C13.3766 13.5855 13.7597 14.0926 14.2666 14.4512C14.7735 14.8098 15.3791 15.0024 16 15.0024C16.6209 15.0024 17.2265 14.8098 17.7334 14.4512C18.2403 14.0926 18.6234 13.5855 18.83 13H20ZM20 19C20.2652 19 20.5196 18.8946 20.7071 18.7071C20.8946 18.5196 21 18.2652 21 18C21 17.7348 20.8946 17.4804 20.7071 17.2929C20.5196 17.1054 20.2652 17 20 17H10.83C10.6234 16.4145 10.2403 15.9074 9.7334 15.5488C9.22654 15.1901 8.62091 14.9975 8 14.9975C7.37909 14.9975 6.77346 15.1901 6.2666 15.5488C5.75974 15.9074 5.3766 16.4145 5.17 17H4C3.73478 17 3.48043 17.1054 3.29289 17.2929C3.10536 17.4804 3 17.7348 3 18C3 18.2652 3.10536 18.5196 3.29289 18.7071C3.48043 18.8946 3.73478 19 4 19H5.17C5.3766 19.5855 5.75974 20.0926 6.2666 20.4512C6.77346 20.8098 7.37909 21.0024 8 21.0024C8.62091 21.0024 9.22654 20.8098 9.7334 20.4512C10.2403 20.0926 10.6234 19.5855 10.83 19H20Z\"\n            fill=\"currentColor\"\n        />\n    </SvgIcon>\n);\n\nexport default SettingsIcon;\n","import React from 'react';\n\nimport { Loader } from 'rsuite';\nimport { RecorderIconWrapper, RecorderIconText } from 'app/features/Recorder/styled/RecordingButtonIcon';\nimport { RecStopIcon, StopIcon, RecIcon, PlayIcon } from 'app/features/Icons/components';\nimport { RecorderStatuses } from 'app/features/Recorder/constants';\n\ntype RecordingButtonIconProps = {\n    status: RecorderStatuses;\n};\n\nconst RecordingButtonIcon: React.FC<RecordingButtonIconProps> = ({ status }) => {\n    const renderIconBody = (): React.ReactNode => {\n        switch (status) {\n            case RecorderStatuses.running:\n                return (\n                    <>\n                        <RecIcon />\n                        <RecorderIconText>Start</RecorderIconText>\n                    </>\n                );\n            case RecorderStatuses.recording:\n                return <RecStopIcon />;\n            case RecorderStatuses.previewPreparing:\n                return <Loader />;\n            case RecorderStatuses.previewPlaying:\n                return <StopIcon />;\n            case RecorderStatuses.previewPaused:\n            case RecorderStatuses.previewStopped:\n                return <PlayIcon />;\n            default:\n                return null;\n        }\n    };\n\n    return <RecorderIconWrapper>{renderIconBody()}</RecorderIconWrapper>;\n};\n\nexport default RecordingButtonIcon;\n","import { Modal, FlexboxGrid, SelectPicker } from 'rsuite';\nimport styled from 'styled-components';\n\nexport const RecordingSettingsWrapper = styled.div`\n    z-index: 2;\n    position: absolute;\n    display: flex;\n    justify-content: flex-end;\n    top: 0;\n    left: 0;\n    padding: 16px 20px;\n    height: 80px;\n    width: 100%;\n    background: rgb(0, 0, 0);\n    background: linear-gradient(180deg, rgba(0, 0, 0, 0.8) -50%, rgba(255, 255, 255, 0) 100%);\n`;\n\nexport const RecordingSettingModal = styled(Modal)`\n    top: 50%;\n    & > div {\n        transform: translateY(-50%);\n    }\n`;\n\nexport const RecordingSettingGroup = styled(FlexboxGrid)`\n    flex-direction: column;\n`;\n\nexport const RecordingSettingRow = styled(FlexboxGrid.Item)`\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n`;\n\nexport const RecordingSettingSelect = styled(SelectPicker)`\n    width: 100%;\n`;\n\nexport const RecordingSettingIconWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    margin-right: 20px;\n`;\n","import React, { useState } from 'react';\nimport { IconButton, Modal, Button } from 'rsuite';\nimport { useSelectMediaDeviceOptions } from 'app/features/Recorder/hooks';\nimport { SettingsIcon, MicIcon, CameraSettingIcon } from 'app/features/Icons/components';\nimport {\n    RecordingSettingsWrapper,\n    RecordingSettingModal,\n    RecordingSettingGroup,\n    RecordingSettingRow,\n    RecordingSettingSelect,\n    RecordingSettingIconWrapper,\n} from 'app/features/Recorder/styled/RecordingSettings';\nimport { useRecorderActions } from 'app/features/Recorder/context';\nimport { RecorderStatuses } from 'app/features/Recorder/constants';\n\nconst RecordingSettings: React.FC = () => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const { setStatus, resetMediaStream, setActiveVideoDeviceId, setActiveAudioDeviceId } = useRecorderActions();\n    const { audioValue, videoValue, audioOptions, videoOptions } = useSelectMediaDeviceOptions();\n\n    const handleOpen = (): void => setIsOpen(true);\n    const handleClose = (): void => setIsOpen(false);\n\n    const handleSubmitChangeMediaDevices = () => {\n        resetMediaStream();\n        setStatus(RecorderStatuses.preparingConstraints);\n        handleClose();\n    };\n\n    return (\n        <RecordingSettingsWrapper>\n            <IconButton appearance=\"subtle\" size=\"lg\" icon={<SettingsIcon />} onClick={handleOpen} />\n            <RecordingSettingModal open={isOpen} onClose={handleClose}>\n                <Modal.Header>\n                    <Modal.Title>Recording Settings</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <RecordingSettingGroup>\n                        <RecordingSettingRow>\n                            <RecordingSettingIconWrapper>\n                                <CameraSettingIcon />\n                            </RecordingSettingIconWrapper>\n                            <RecordingSettingSelect\n                                value={videoValue}\n                                data={videoOptions}\n                                onChange={setActiveVideoDeviceId}\n                                searchable={false}\n                                cleanable={false}\n                                placeholder=\"Select video device\"\n                            />\n                        </RecordingSettingRow>\n                        <RecordingSettingRow>\n                            <RecordingSettingIconWrapper>\n                                <MicIcon />\n                            </RecordingSettingIconWrapper>\n                            <RecordingSettingSelect\n                                value={audioValue}\n                                data={audioOptions}\n                                onChange={setActiveAudioDeviceId}\n                                searchable={false}\n                                cleanable={false}\n                                placeholder=\"Select audio device\"\n                            />\n                        </RecordingSettingRow>\n                    </RecordingSettingGroup>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={handleSubmitChangeMediaDevices} appearance=\"primary\">\n                        Ok\n                    </Button>\n                    <Button onClick={handleClose} appearance=\"subtle\">\n                        Cancel\n                    </Button>\n                </Modal.Footer>\n            </RecordingSettingModal>\n        </RecordingSettingsWrapper>\n    );\n};\n\nexport default RecordingSettings;\n","import React from 'react';\nimport { FlexboxGrid, Progress } from 'rsuite';\nimport { useRecorderState, useRecorderActions } from 'app/features/Recorder/context';\nimport {\n    RecorderButton,\n    RecorderTimeDivider,\n    RecordingPreviewProgressBarWrapper,\n    RecorderControlsTimer,\n} from 'app/features/Recorder/styled/RecorderControls';\nimport { ResetIcon } from 'app/features/Icons/components';\nimport { RecordingButtonIcon } from 'app/features/Recorder/components';\nimport { Time } from 'app/features/Timer/components';\n\ntype RecordingPreviewControlsProps = {\n    previewTime: number;\n    onPlayPause: () => void;\n    onReset: () => void;\n};\n\nconst RecordingPreviewControls: React.FC<RecordingPreviewControlsProps> = ({ previewTime, onPlayPause, onReset }) => {\n    const { status, duration } = useRecorderState();\n    const { setNextStatus } = useRecorderActions();\n\n    const previewTimeMs = previewTime * 1000;\n    const progressPercentage = Math.min((previewTimeMs / duration) * 100, 100);\n\n    const handlePlayPause = () => {\n        onPlayPause();\n        setNextStatus();\n    };\n\n    return (\n        <>\n            <RecordingPreviewProgressBarWrapper>\n                <Progress.Line percent={progressPercentage} strokeColor=\"#52c41a\" showInfo={false} />\n            </RecordingPreviewProgressBarWrapper>\n            <FlexboxGrid align=\"middle\" justify=\"center\">\n                <FlexboxGrid.Item>\n                    <RecorderButton circle color=\"blue\" appearance=\"primary\" icon={<ResetIcon />} onClick={onReset} />\n                </FlexboxGrid.Item>\n                <FlexboxGrid.Item>\n                    <RecorderButton\n                        circle\n                        color=\"red\"\n                        appearance=\"primary\"\n                        icon={<RecordingButtonIcon status={status} />}\n                        onClick={handlePlayPause}\n                    />\n                </FlexboxGrid.Item>\n                <FlexboxGrid.Item>\n                    <RecorderControlsTimer className=\"recording-timer\">\n                        <Time time={previewTimeMs} />\n                        <RecorderTimeDivider>/</RecorderTimeDivider>\n                        <Time time={duration} />\n                    </RecorderControlsTimer>\n                </FlexboxGrid.Item>\n            </FlexboxGrid>\n        </>\n    );\n};\n\nexport default RecordingPreviewControls;\n","import React from 'react';\nimport { CustomProvider, Container, Content, FlexboxGrid } from 'rsuite';\nimport styled from 'styled-components';\nimport { Recorder } from 'app/features/Recorder/components';\nimport { RecorderContextProvider } from 'app/features/Recorder/context';\nimport 'rsuite/dist/rsuite.min.css';\n\nconst StyledFlexboxGrid = styled(FlexboxGrid)`\n    height: 100vh;\n`;\n\nconst App: React.FC = () => (\n    <CustomProvider theme=\"dark\">\n        <Container>\n            <Content>\n                <StyledFlexboxGrid justify=\"center\" align=\"middle\">\n                    <FlexboxGrid.Item colspan={12}>\n                        <RecorderContextProvider>\n                            <Recorder />\n                        </RecorderContextProvider>\n                    </FlexboxGrid.Item>\n                </StyledFlexboxGrid>\n            </Content>\n        </Container>\n    </CustomProvider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}